{"_id": "59dce17363dce279d389100834e43648", "_meta": {"ETag": "f9bac2511927e4ab27e381ee81272ce04050c1d088b8c7599d4937533560d5b3", "github_username": "newgene", "slug": "mygene", "timestamp": "2020-03-06T23:15:13.157636", "uptime_status": "good", "uptime_ts": "2019-12-02T23:25:22.842363", "url": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mygene.info/openapi_full.yml"}, "_score": 1.2932464, "components": {"parameters": {"callback": {"description": "you can pass a \"callback\" parameter to make a JSONP call.", "in": "query", "name": "callback", "schema": {"type": "string"}}, "dotfield": {"description": "control the format of the returned fields when passed \"fields\" parameter contains dot notation, e.g. \"fields=refseq.rna\". If \"true\" or \"1\", the returned data object contains a single \"refseq.rna\" field, otherwise (\"false\" or \"0\"), a single \"refseq\" field with a sub-field of \"rna\". Default: true.", "in": "query", "name": "dotfield", "schema": {"type": "boolean"}}, "email": {"description": "If you are regular users of our services, we encourage you to provide us an email, so that we can better track the usage or follow up with you.", "in": "query", "name": "email", "schema": {"type": "string"}}, "fields": {"description": "a comma-separated fields to limit the fields returned from the matching gene hits. The supported field names can be found from any gene object (e.g. http://mygene.info/v3/gene/1017). Note that it supports dot notation as well, e.g., you can pass \"refseq.rna\". If \"fields=all\", all available fields will be returned. Default: \"symbol,name,taxid,entrezgene,ensemblgene\".", "in": "query", "name": "fields", "schema": {"type": "string"}}, "from": {"description": "the number of matching gene hits to skip, starting from 0. Combining with \"size\" parameter, this can be useful for paging. Default: 0.", "in": "query", "name": "from", "schema": {"type": "integer"}}, "size": {"description": "the maximum number of matching gene hits to return (with a cap of 1000 at the moment). Default: 10.", "in": "query", "name": "size", "schema": {"type": "integer"}}, "sort": {"description": "the comma-separated fields to sort on. Prefix with \"-\" for descending order, otherwise in ascending order. Default: sort by matching scores in decending order.", "in": "query", "name": "sort", "schema": {"type": "string"}}, "species": {"description": "can be used to limit the gene hits from given species. You can use \"common names\" for nine common species (human, mouse, rat, fruitfly, nematode, zebrafish, thale-cress, frog and pig). All other species, you can provide their taxonomy ids. Multiple species can be passed using comma as a separator. Default: human,mouse,rat.", "in": "query", "name": "species", "schema": {"type": "string"}}}, "schemas": {"Gene": {"properties": {"AnimalQTLdb": {"type": "string"}, "FLYBASE": {"type": "string"}, "HGNC": {"type": "string"}, "HPRD": {"type": "string"}, "MGI": {"type": "string"}, "MIM": {"type": "string"}, "RATMAP": {"type": "string"}, "RGD": {"type": "string"}, "TAIR": {"type": "string"}, "Vega": {"type": "string"}, "WormBase": {"type": "string"}, "Xenbase": {"type": "string"}, "ZFIN": {"type": "string"}, "_id": {"type": "string"}, "accession": {"type": "object"}, "aliase": {"type": "string"}, "ec": {"type": "string"}, "ensembl": {"type": "object"}, "entrezgene": {"format": "int64", "type": "integer"}, "generif": {"properties": {"pubmed": {"$ref": "#/components/schemas/int64_or_array"}, "text": {"type": "string"}}, "type": "object"}, "genomic_pos": {"type": "object"}, "go": {"type": "object"}, "homologene": {"type": "object"}, "interpro": {"type": "object"}, "locus_tag": {"type": "string"}, "map_location": {"type": "string"}, "miRBase": {"type": "string"}, "name": {"type": "string"}, "other_names": {"$ref": "#/components/schemas/string_or_array"}, "pathway": {"type": "object"}, "pdb": {"$ref": "#/components/schemas/string_or_array"}, "pfam": {"type": "string"}, "pharmgkb": {"type": "string"}, "pid": {"type": "string"}, "pir": {"type": "string"}, "prosite": {"type": "string"}, "reagent": {"type": "object"}, "refseq": {"type": "object"}, "reporter": {"type": "object"}, "summary": {"type": "string"}, "symbol": {"type": "string"}, "taxid": {"format": "int32", "type": "integer"}, "type_of_gene": {"type": "string"}, "umls": {"type": "object"}, "unigene": {"type": "string"}, "uniprot": {"properties": {"Swiss-Prot": {"$ref": "#/components/schemas/string_or_array"}, "TrEMBL": {"$ref": "#/components/schemas/string_or_array"}}, "type": "object"}, "wikipedia": {"properties": {"url_stub": {"type": "string"}}, "type": "object"}}, "required": ["_id", "taxid"], "type": "object"}, "MinimalGene": {"properties": {"_id": {"type": "string"}, "entrezgene": {"format": "int64", "type": "integer"}, "name": {"type": "string"}, "symbol": {"type": "string"}, "taxid": {"format": "int32", "type": "integer"}}, "required": ["_id", "taxid"], "type": "object"}, "QueryPOSTResult": {"items": {"allOf": [{"$ref": "#/components/schemas/MinimalGene"}, {"properties": {"_score": {"format": "float", "type": "number"}, "query": {"type": "string"}}, "type": "object"}]}, "type": "array"}, "QueryResult": {"properties": {"hits": {"items": {"$ref": "#/components/schemas/Gene"}, "type": "array"}, "max_score": {"format": "float", "type": "number"}, "took": {"type": "integer"}, "total": {"type": "integer"}}, "type": "object"}, "int64_or_array": {"oneOf": [{"items": {"format": "int64", "type": "integer"}, "type": "array"}, {"format": "int64", "type": "integer"}]}, "string_or_array": {"oneOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "string"}]}}, "x-bte-kgs-operations": {"enablesMF": {"inputSeparator": ",", "inputs": [{"id": "entrez", "semantic": "Gene"}], "method": "post", "outputs": [{"id": "go", "semantic": "MolecularActivity"}], "parameters": {"dotfield": false, "fields": "go.MF"}, "path": "/query", "requestBody": {"body": {"q": "{input1}", "scopes": "entrezgene"}, "header": "application/x-www-form-urlencoded"}, "supportBatch": true}, "hasGeneProduct": {"inputs": [{"id": "ensembl", "semantic": "Gene"}], "method": "post", "outputs": [{"id": "ensembl", "semantic": "Protein"}], "parameters": {"dotfield": false, "fields": "ensembl.protein"}, "path": "/query", "requestBody": {"body": {"q": "{input1}", "scopes": "ensembl.gene"}, "header": "application/x-www-form-urlencoded"}, "separator": ",", "supportBatch": true}, "hasHomolog": {"inputs": [{"id": "entrez", "semantic": "Gene"}], "method": "post", "outputs": [{"id": "mgi", "semantic": "Gene"}], "parameters": {"dotfield": false, "fields": "pantherdb.ortholog"}, "path": "/query", "requestBody": {"body": {"q": "{input1}", "scopes": "entrezgene"}, "header": "application/x-www-form-urlencoded"}, "separator": ",", "supportBatch": true}, "hasTranscript": {"inputs": [{"id": "ensembl", "semantic": "Gene"}], "method": "post", "outputs": [{"id": "ensembl"}, {"semantic": "Transcript"}], "parameters": {"dotfield": false, "fields": "ensembl.transcript"}, "path": "/query", "requestBody": {"body": {"q": "{input1}", "scopes": "ensembl.gene"}, "header": "application/x-www-form-urlencoded"}, "separator": ",", "supportBatch": true}, "involvedInBP": {"inputs": [{"id": "entrez", "semantic": "Gene"}], "method": "post", "outputs": [{"id": "go", "semantic": "BiologicalProcess"}], "parameters": {"dotfield": false, "fields": "go.BP"}, "path": "/query", "requestBody": {"body": {"q": "{input1}", "scopes": "entrezgene"}, "header": "application/x-www-form-urlencoded"}, "separator": ",", "supportBatch": true}, "involvedInCC": {"inputs": [{"id": "entrez", "semantic": "Gene"}], "method": "post", "outputs": [{"id": "go", "semantic": "CellularComponent"}], "parameters": {"dotfield": false, "fields": "go.CC"}, "path": "/query", "requestBody": {"body": {"q": "{input1}", "scopes": "entrezgene"}, "header": "application/x-www-form-urlencoded"}, "separator": ",", "supportBatch": true}, "involvedInPathway": [{"inputs": [{"id": "entrez", "semantic": "Gene"}], "method": "post", "outputs": [{"id": "wikipathways", "semantic": "Pathway"}], "parameters": {"dotfield": false, "fields": "pathway.wikipathways"}, "path": "/query", "requestBody": {"body": {"q": "{input1}", "scopes": "entrezgene"}, "header": "application/x-www-form-urlencoded"}, "separator": ",", "supportBatch": true}, {"inputs": [{"id": "entrez", "semantic": "Gene"}], "method": "post", "outputs": [{"id": "reactome", "semantic": "Pathway"}], "parameters": {"dotfield": false, "fields": "pathway.reactome", "species": "human"}, "path": "/query", "requestBody": {"body": {"q": "{input1}", "scopes": "entrezgene"}, "header": "application/x-www-form-urlencoded"}, "separator": ",", "supportBatch": true}]}, "x-bte-response-mapping": {"query-post": {"@context": "http://schema.org", "@type": "Gene", "bts:description": "summary", "bts:enablesMF": {"$input": "bts:entrez", "$source": "entrez", "@type": "MolecularActivity", "bts:evidence": "go.MF.evidence", "bts:go": "go.MF.id", "bts:pubmed": "go.MF.pubmed", "bts:term": "go.MF.term"}, "bts:ensembl": "ensembl.gene", "bts:entrez": "entrezgene", "bts:hasGeneProduct": {"$input": "bts:ensembl", "@type": "Protein", "bts:ensembl": "ensembl.protein", "bts:uniprot": "uniprot.Swiss-Prot"}, "bts:hasHomolog": {"$input": "bts:entrez", "@type": "Gene", "bts:dictybase": "pantherdb.ortholog.dictyBase", "bts:ensembl": "pantherdb.ortholog.Ensembl", "bts:flybase": "pantherdb.ortholog.FlyBase", "bts:hgnc": "pantherdb.ortholog.HGNC", "bts:inTaxon": "pantherdb.ortholog.taxid", "bts:mgi": "pantherdb.ortholog.MGI", "bts:pombase": "pantherdb.ortholog.PomBase", "bts:rgd": "pantherdb.ortholog.RGD", "bts:sgd": "pantherdb.ortholog.SGD", "bts:tair": "pantherdb.ortholog.TAIR", "bts:zfin": "pantherdb.ortholog.ZFIN"}, "bts:hasProteinStructure": "pdb", "bts:hasTranscript": {"$input": "bts:ensembl", "@type": "Transcript", "bts:ensembl": "ensembl.transcript"}, "bts:hgnc": "HGNC", "bts:inTaxon": "taxid", "bts:involvedInBP": {"$input": "bts:entrez", "$source": "entrez", "@type": "BiologicalProcess", "bts:evidence": "go.BP.evidence", "bts:go": "go.BP.id", "bts:pubmed": "go.BP.pubmed", "bts:term": "go.BP.term"}, "bts:involvedInCC": {"$input": "bts:entrez", "$source": "entrez", "@type": "CellularComponent", "bts:evidence": "go.CC.evidence", "bts:go": "go.CC.id", "bts:pubmed": "go.CC.pubmed", "bts:term": "go.CC.term"}, "bts:involvedInPathway": [{"$input": "bts:entrez", "$source": "cpdb", "@type": "Pathway", "bts:name": "pathway.wikipathways.name", "bts:wikipathways": "pathway.wikipathways.id"}, {"$input": "bts:entrez", "$source": "cpdb", "@type": "Pathway", "bts:name": "pathway.reactome.name", "bts:reactome": "pathway.reactome.id"}], "bts:name": ["name", "other_names"], "bts:omim": "MIM", "bts:pharmgkb": "pharmgkb", "bts:pharos": "pahros.target_id", "bts:symbol": "symbol", "bts:umls": "umls.cui", "bts:unigene": "unigene"}}}, "info": {"contact": {"email": "help@mygene.info", "name": "Chunlei Wu", "x-id": "https://github.com/newgene", "x-role": "responsible developer"}, "description": "Documentation of the MyGene.info Gene Query web services. Learn more about [MyGene.info](http://mygene.info/)", "termsOfService": "http://mygene.info/terms/", "title": "MyGene.info API", "version": "3.0"}, "openapi": "3.0.0", "paths": [{"path": "/gene", "pathitem": {"post": {"parameters": [{"$ref": "#/components/parameters/fields", "name": "fields"}, {"$ref": "#/components/parameters/species", "name": "species"}, {"$ref": "#/components/parameters/dotfield", "name": "dotfield"}, {"$ref": "#/components/parameters/email", "name": "email"}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"properties": {"ids": {"description": "multiple geneids seperated by comma, e.g., \"ids=1017,1018\" or \"ids=695,ENSG00000123374\". Note that currently we only take the input ids up to 1000 maximum, the rest will be omitted.", "type": "string"}}, "required": ["ids"]}}}}, "responses": {"200": {"content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/Gene"}, "type": "array"}}}, "description": "a list of matching gene objects", "x-JSONLDContext": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mygene.info/jsonld_context/mygene_gene_1.1.json", "x-responseValueType": [{"path": "symbol", "valueType": "http://identifiers.org/hgnc.symbol/"}, {"path": "unigene", "valueType": "http://identifiers.org/unigene/"}, {"path": "uniprot.Swiss-Prot", "valueType": "http://identifiers.org/uniprot/"}, {"path": "pdb", "valueType": "http://identifiers.org/pdb/"}, {"path": "pathway.biocarta.id", "valueType": "http://identifiers.org/biocarta.pathway/"}, {"path": "pathway.kegg.id", "valueType": "http://identifiers.org/kegg.pathway/"}, {"path": "pathway.reactome.id", "valueType": "http://identifiers.org/reactome/"}, {"path": "pathway.wikipathways.id", "valueType": "http://identifiers.org/wikipathways/"}, {"path": "pathway.pharmgkb.id", "valueType": "http://identifiers.org/pharmgkb.pathways/"}]}}, "summary": "For a list of gene ids, return the matching gene objects", "tags": ["annotation"]}}}, {"path": "/gene/{geneid}", "pathitem": {"get": {"parameters": [{"description": "Entrez or Ensembl gene id, e.g., 1017, ENSG00000170248. A retired Entrez Gene id works too if it is replaced by a new one, e.g., 245794", "example": "1017", "in": "path", "name": "geneid", "required": true, "schema": {"type": "string"}, "x-requestTemplate": [{"template": "/gene/{{input}}", "valueType": "http://identifiers.org/ncbigene/"}, {"template": "/gene/{{input}}", "valueType": "http://identifiers.org/ensembl/"}], "x-valueType": ["http://identifiers.org/ncbigene/", "http://identifiers.org/ensembl/"]}, {"$ref": "#/components/parameters/fields", "name": "fields"}, {"$ref": "#/components/parameters/dotfield", "name": "dotfield"}, {"$ref": "#/components/parameters/callback", "name": "callback"}, {"$ref": "#/components/parameters/email", "name": "email"}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Gene"}}}, "description": "A matching gene object", "x-JSONLDContext": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mygene.info/jsonld_context/mygene_gene_1.1.json", "x-responseValueType": [{"path": "symbol", "valueType": "http://identifiers.org/hgnc.symbol/"}, {"path": "unigene", "valueType": "http://identifiers.org/unigene/"}, {"path": "uniprot.Swiss-Prot", "valueType": "http://identifiers.org/uniprot/"}, {"path": "pdb", "valueType": "http://identifiers.org/pdb/"}, {"path": "pathway.biocarta.id", "valueType": "http://identifiers.org/biocarta.pathway/"}, {"path": "pathway.kegg.id", "valueType": "http://identifiers.org/kegg.pathway/"}, {"path": "pathway.reactome.id", "valueType": "http://identifiers.org/reactome/"}, {"path": "pathway.wikipathways.id", "valueType": "http://identifiers.org/wikipathways/"}, {"path": "pathway.pharmgkb.id", "valueType": "http://identifiers.org/pharmgkb.pathways/"}]}}, "summary": "Retrieve gene annotation object based on Entrez or Ensembl gene id, support JSONP and CORS as well.", "tags": ["annotation"]}}}, {"path": "/metadata", "pathitem": {"get": {"parameters": [{"$ref": "#/components/parameters/callback", "name": "callback"}], "responses": {"200": {"description": "MyGene.info metadata object"}}, "summary": "Get metadata about the data available from MyGene.info."}}}, {"path": "/metadata/fields", "pathitem": {"get": {"parameters": [{"description": "Pass a search term to filter the available fields, e.g. \"search=clinvar\".", "in": "query", "name": "search", "schema": {"type": "string"}}, {"description": "Pass a prefix string to filter the available fields, e.g. \"prefix=refseq\".", "in": "query", "name": "prefix", "schema": {"type": "string"}}, {"$ref": "#/components/parameters/callback", "name": "callback"}], "responses": {"200": {"description": "MyGene.info metadata fields object"}}, "summary": "Get metadata about the data fields available from MyGene.info."}}}, {"path": "/query", "pathitem": {"get": {"parameters": [{"description": "Query string. Examples \"CDK2\", \"NM_052827\", \"204639_at\", \"chr1:151,073,054-151,383,976\", \"hg19.chr1:151073054-151383976\". The detailed query syntax can be found from our [docs](http://docs.mygene.info/en/latest/doc/query_service.html).", "example": "CDK2", "in": "query", "name": "q", "required": true, "schema": {"type": "string"}, "x-requestTemplate": [{"template": "symbol:{{input}}", "valueType": "http://identifiers.org/hgnc.symbol/"}, {"template": "refseq.genomic:{{input}}", "valueType": "http://identifiers.org/refseq/"}, {"template": "unigene:{{input}}", "valueType": "http://identifiers.org/unigene/"}, {"template": "uniprot.Swiss-Prot:{{input}}", "valueType": "http://identifiers.org/uniprot/"}, {"template": "pdb:{{input}}", "valueType": "http://identifiers.org/pdb/"}, {"template": "pathway.biocarta.id:{{input}}", "valueType": "http://identifiers.org/biocarta.pathway/"}, {"template": "pathway.kegg.id:{{input}}", "valueType": "http://identifiers.org/kegg.pathway/"}, {"template": "pathway.wikipathways.id:{{input}}", "valueType": "http://identifiers.org/wikipathways/"}, {"template": "pathway.pharmgkb.id:{{input}}", "valueType": "http://identifiers.org/pharmgkb.pathways/"}, {"template": "pathway.reactome.id:{{input}}", "valueType": "http://identifiers.org/reactome/"}, {"template": "ensembl.gene", "valueType": "http://identifiers.org/ensembl.gene/"}, {"template": "ensembl.protein", "valueType": "http://identifiers.org/ensembl.protein/"}, {"template": "ensembl.transcript", "valueType": "http://identifiers.org/ensembl.transcript/"}, {"template": "ensembl.translation", "valueType": "http://identifiers.org/ensembl.translation/"}], "x-valueType": ["http://identifiers.org/hgnc.symbol/", "http://identifiers.org/refseq/", "http://identifiers.org/unigene/", "http://identifiers.org/uniprot/", "http://identifiers.org/pdb/", "http://identifiers.org/biocarta.pathway/", "http://identifiers.org/kegg.pathway/", "http://identifiers.org/wikipathways/", "http://identifiers.org/pharmgkb.pathways/", "http://identifiers.org/reactome/", "http://identifiers.org/ensembl.gene/", "http://identifiers.org/ensembl.protein/", "http://identifiers.org/ensembl.transcript/", "http://identifiers.org/ensembl.translation/"]}, {"$ref": "#/components/parameters/fields", "name": "fields"}, {"$ref": "#/components/parameters/species", "name": "species"}, {"$ref": "#/components/parameters/size", "name": "size"}, {"$ref": "#/components/parameters/from", "name": "from"}, {"$ref": "#/components/parameters/sort", "name": "sort"}, {"description": "a single field or comma-separated fields to return facets, for example, \"facets=taxid\", \"facets=taxid,type_of_gene\".", "in": "query", "name": "facets", "schema": {"type": "string"}}, {"description": "relevant when faceting on species (i.e., \u201cfacets=taxid\u201d are passed). It\u2019s used to pass species filter without changing the scope of faceting, so that the returned facet counts won\u2019t change. Either species name or taxonomy id can be used, just like \u201cspecies\u201d parameter.", "in": "query", "name": "species_facet_filter", "schema": {"type": "string"}}, {"description": "when passed as \u201ctrue\u201d or \u201c1\u201d, the query returns only the hits with valid Entrez gene ids. Default: false.", "in": "query", "name": "entrezonly", "schema": {"type": "boolean"}}, {"description": "when passed as \u201ctrue\u201d or \u201c1\u201d, the query returns only the hits with valid Ensembl gene ids. Default: false.", "in": "query", "name": "ensemblonly", "schema": {"type": "boolean"}}, {"$ref": "#/components/parameters/callback", "name": "callback"}, {"$ref": "#/components/parameters/dotfield", "name": "dotfield"}, {"$ref": "#/components/parameters/email", "name": "email"}], "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueryResult"}}}, "description": "A query response object with \"hits\" property", "x-JSONLDContext": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mygene.info/jsonld_context/mygene_query_1.1.json", "x-responseValueType": [{"path": "hits._id", "valueType": "http://identifiers.org/ncbigene/"}, {"path": "hits.entrezgene", "valueType": "http://identifiers.org/ncbigene/"}, {"path": "hits.symbol", "valueType": "http://identifiers.org/hgnc.symbol/"}, {"path": "hits.taxid", "valueType": "http://identifiers.org/taxonomy/"}]}}, "summary": "Make gene query and return matching gene list. Support JSONP and CORS as well.", "tags": ["query"]}, "post": {"parameters": [{"$ref": "#/components/parameters/fields", "name": "fields"}, {"$ref": "#/components/parameters/species", "name": "species"}, {"$ref": "#/components/parameters/dotfield", "name": "dotfield"}, {"$ref": "#/components/parameters/email", "name": "email"}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"properties": {"q": {"description": "multiple query terms seperated by comma (also support \"+\" or white space), but no wildcard, e.g., \"q=1017,1018\" or \"q=CDK2+BTK\"", "type": "string"}, "scopes": {"description": "Specify one or more fields (separated by comma) as the search \"scopes\", e.g., \"scopes=entrezgene\", \"scopes=entrezgene,ensemblgene\". The available \"fields\" can be passed to \"scopes\" parameter are listed [here](http://mygene.info/doc/query_service.html#available-fields). Default: \"scopes=entrezgene,ensemblgene,retired\" (either Entrez or Ensembl gene ids).", "type": "string"}}, "required": ["q"]}}}}, "responses": {"200": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/QueryPOSTResult"}}}, "description": "Query response objects with \"hits\" property", "x-JSONLDContext": "https://raw.githubusercontent.com/NCATS-Tangerine/translator-api-registry/master/mygene.info/jsonld_context/mygene_query_1.1.json", "x-bte-response-mapping": {"$ref": "#/components/x-bte-response-mapping/query-post"}, "x-responseValueType": [{"path": "hits._id", "valueType": "http://identifiers.org/ncbigene/"}, {"path": "hits.entrezgene", "valueType": "http://identifiers.org/ncbigene/"}, {"path": "hits.symbol", "valueType": "http://identifiers.org/hgnc.symbol/"}, {"path": "hits.taxid", "valueType": "http://identifiers.org/taxonomy/"}]}}, "summary": "Make gene batch query and return matching gene hits", "tags": ["query"], "x-bte-kgs-operations": [{"enablesMF": {"$ref": "#/components/x-bte-kgs-operations/enablesMF"}}, {"involvedInBP": {"$ref": "#/components/x-bte-kgs-operations/involvedInBP"}}, {"involvedInCC": {"$ref": "#/components/x-bte-kgs-operations/involvedInCC"}}, {"involvedInPathway": {"$ref": "#/components/x-bte-kgs-operations/involvedInPathway"}}, {"hasTranscript": {"$ref": "#/components/x-bte-kgs-operations/hasTranscript"}}, {"hasGeneProduct": {"$ref": "#/components/x-bte-kgs-operations/hasGeneProduct"}}, {"hasHomolog": {"$ref": "#/components/x-bte-kgs-operations/hasHomolog"}}]}}}], "servers": [{"description": "Encrypted Production server", "url": "https://mygene.info/v3"}, {"description": "Production server", "url": "http://mygene.info/v3"}], "tags": [{"name": "gene"}, {"name": "annotation"}, {"name": "query"}, {"name": "translator"}], "~raw": "H4sIAIHZYl4C_-1cbXPbNhL-KxjdfUjmKMovSdNkJjO1ncTNXZy4sae9O9ujgUhIQk0SDAhaVjP-77cLgCRIkZTkuLmbXPohFgnsYnex2H2wAPt5IFKW0JQPXpDBvr_j7ww8MuDJVMCLz4NAJIoGSv9mMeURdpuzKP0pXs5YwnzdEygSGjNsO5rnScQ4-S3Ht7dDHmoKpdLsxWg042qeT_xAxKOELZCB6SVFpKkly1KRZHwSMRKyGxaBcHJwB31ClgWSp4qLBDu-EkEeM5ANXxAxJWrOyMnyuBCJ4C_yS87kkizYhGRM3vCAZT55x6hMSCwkI3QickUuHLKrRygpCOpoN3qMMiom4-zD9MzwKXRq9NSdRro7V0YjV6aD07fYdsNkZtUAg2vtUDx4C68uPjdVfZ0EcpkqFpJTKcI80BobAuSWy8i1sCvOzT4yX2G4jk0LlytUic6sgMVc6_nTIxRvaJIIMyf1959wIuqvlKRJFlElpGGfUjXPtJ-NNF_8lYrMuF5KJZCp0kR_lWyKTP4yAlcCjwFPyEZVp9GUsyjMXL-0b7QI66izlAWc1ciLVxvRh0Lp4VwG5buNOJil5pCbF9pQkoE1M3UowmW5RIFe_6ZpGvFAT8DodrhYLIZTIeMhTC5LAhGyUPfKgjnwM4aVuMIUqoaPPDR_Gx4T55HiKaxJnBnoA34DVBR9crIkoEJMPcL8me-RS-Txcndn95kH__x4OSBC2pc_PH_qvX5_dryD_-3u7e8_e3I58Ml7oRgsX6pIkEsJmkS4ZIlI4K-i10wvbZ6ksFRx6DwlSpBdYEFiesvjPPZ0Dwgdiix4FJEJEMdcgXS-XorL1EyhkjyZDe7urA251Oa40Epf3d3ZBh2ArDn2dnZ6Tfx7pu1TsyhXLDbUrZNsemajY7t2SvGolBSWyF1LsKMk4qAcRLmYqmAOWuiJIGLyOwtUZkLo388-vH_36gglvVVuRJB04Zu4m8Nyt6roEPz-6OD8bHhOkxkD07BRtSSHkBCGks1gWLkcgbzglbWggJpH4Tgww9mmsf5n19_1tWFMZLcG_ZVGOTs3ul581qtdT8oyngjt6TdOhyIM8RBE5bBuZOYLORvNZ0ngG5KRWUgFnzzhRTbZhJHtvsoE1oPyzxY8y4YQJtUW_JCywS8NJ5sygK5NYvi7oEt_wkVApaI-DzdlVpJYHh2cr9lstgVX3b2fo2SAFUTMtuBakHRwXPBrbn9nW3B1yTo4p3Mq49n1ZAuuJYnD-kov2CyHECgxHg_eQLyrFqxepxBgPIhPKgfggaGqcxUXKdbNo2YAnRNHn038vdPhZcbac-MKfFCS_YFR-DUsw3gSFTIVEVvHalIF5mc7e09-9MkBSowxklgOx4aMLIS8ziAGC8KnhENQzqBnGtHAZANKANlB9GYF_70nT589f4LqsVsapwYW4aAGaBZz4mY7o-agHqiVzBmaugq1zchuA45Oj-cMhoIMZWyiqqfClJ91Srm723Tyk2DixowH4MjMfIxMWr8dujQX68Xw1jO-2ghsfBlY-nKwE9AomtDg2uVQvnsAuPSlGX2DPN6WtQ9a1_n3ZP09WX9P1v8ryfojg9TBbszGhlRZ1y5WMqEZZDV47smiWZ6mQiqCa_oUeITk6MPHM0Iz2MVEkb8mr0MEoyFVtDelf1kE7Y6CjYjl1ioKuYqw1bTcMVNVH1NIQWhjHm8g-lKs4UyliN2yjD-oa13kni3wzCnNMgAZGaMymBOsuOB-cMoj-KlFcEbXzA0OgT2oIXkZRDy5oRK2nhUAMfUJd7-v-w768UZrccWIl8KM8Vtiem4qoCF6Cf9m7FO_fKbrJvL9N33H6HcfF7KU6z3JWGYL_zE1QWMin7w2kDQD6x-9-sfe5QArGO9PxjtP937ce2Ye93ae_LD_fEyVeQzmcvfF7tNdb-fZvrfz9MkQf-__uO89f_aD6TGf7T73i27Qy3aCPrqLT85RTdCcRxBdPhmBlomitySgCdYvpiKHOKJ1FrkkF6EIsrI2iQ--m99ZMkIomilsMhYZ24KnP1dx9NhvoG9Utce5Pv1JyNuAgRdbA-VVJOFyNcvFB3OImAfbczf0LYwt7tieYx2wNFg2QMu9uDvwxeUOuGR7dhWYqbFaBTTbs-6ANm3jWHiz_RgtQKeNfwOabD9OC0hpG8cBKveYihbI0jWQg97u4_I1HOfyt3tHfxuA7tL0sESvZTzZlqsl62Gst0I6xm_Lu6Jcxz4yqO0-_A3pdtv8Wsjz1sYub30s8tYHFK8_SHhbLHRvwwXrbbjgvG0WjbeB43sberO3uX96W7mbt53zfI1Szpeee2X8D1YjxufN5AakU5ManzcbE7ZetTHxuQ2Yw5YBoEoBunEnp8-thhlDbniUZTEngHVbq53SgCmA51PobNETwjvz-iXANR4awOe-8RAbjcVU11f6Qbwhu8cmQ7KI3dBEkcWcWTFxm4EHuma-yCPuMzyNy_d2doOawPgmJFQyksJWhYWPffJW6bfPM5LjdhcMgE0lL7t1WXA1R4wezGky07saQLFZIFKGhe5CCNgPC3OaZw7l0JBoW2wGi-cwfWQhEjOgZcYAhwNzGKMYEi2EUwQiC4B1S6w7W2iMInrk9zxTJOLXzKpoCa12pX_0bvEMyViLNjZK3mMu9BQYU-Ke34iDiNnKgsef-t2ueWFOKw3oN-bJ7FknvJ5zNA_YgkCW4GXpvThF8MkrNqV5pF6AQaOM9anHNCly7lBqIkTEaPJf0apWQtlSLU27sV5_fvH5zz7t_1PL13o3_JFlYPyuKnYxqUaOojKmpxO2ujC1lwNirxEs_3eq22YXvFV5G3Xxx5tXGBsnQjU2ZvVtA6L7uD1U4V0z02lgU15FAG4rnp7g5Qy9ho2LYOnTZs76yQcehvrkbIs6qVn2iHm-3wH62neAPvXeADJTrS-6tdwCIo8gfouyJH45-Ju5ALQAzwOwkEKqfeyRCaCIROBlnRC2DWF1dejT6sWhTy-xWPW3w_N_XA7abvPoHADyt95bOsMZmy7xNBq56Ut_FuU9qnBfIfxj9EUNakxt-dJyRoxXSGjevKyWtwGAK689m6csCNQVv6qYeWldEZS0qMamWoBe1agVjNFwDVcRdLkAnMRa7ym2F__-Ug47NIM-dtLtGsk9ewUAZHnEDELrPAjJHm922-rTA961Wp_aTj-cnfelt1_aklv2Pbv9_2U3bcOJYqUdhzG4H_pwp6e19zdrcKjz1l13zpxgilyXOVGltsRYCns9y4ZCR2FwaJsYWYKrPTt5s07yOvGoojPQmSc3Irph4dvk8HRLVjXSJrejo3tzA9Imt1NT9rk3y4Le8J3T7LyqJm7Hs05b8sMjK3vlenuGLnHJ8WcRi0jMtudWEN4hmEPPrGhWIdbnah_UklqXIte5KzXnnZdl51regnwWo8dTi_qwU9_uzt2N9e_DKzDVIhxGSykincwR_FBVfCJQFSQMDHD3uU5WrjTQH0Bw2M3CeKQ4vC9PbA2BPbH1ZUIx17-dQoveK1sMs4sgoTa6c7JejVBWqC4HLkMjqkcE5t8Fhyz1CCtOsE8u-O9cDgBVrZAXpCabQXM-GdriF0popS2xAErcNzcuol2z7S4_FVmZGbANeg7iGch6eUQlFnRkhiLhSWfxnYaHV8ARr-aSzpimwbKUFDcQw4EEQibRg1T1JiAwYEppz5PgRtroeYYcwFBTEUVigRfItUGAZ2-hoYDfa_zQucGwUnHsrjBGPOamRGbfVY6Jh76rt0R1ctMw0oLrgp2ulWUtB8c0WboXzwDBoc-2fuBhLjAi9n7s3scHCe1gdfcv9mwFLK7Fgrrz2tVg1wmsblwK8GflEkR5db8wRB2l6nzvoaqeqbJ2Qu2-emu5I1w3p1h-bplRnJYkjyfgXyuX8XWRC2Y2u-YpOKWiUtdk9VTs-ORIxBOe4BuLLbE47kYajBA8c6qc0zzSleeUzvRVhdIcO7062kp6i4YcIOQMP6fSmARr8x0q2u8q1qpqIcsjG18CmmJf_WmGrf_GAj_Scnccu73SFycIa6XHKn-H9N2LDqlgL-iTU3M7x87EEAMlGBp5sSTUlXQZ4oxUIZej09daHZ00X9hFllaCTRWgQiQKWZ2oT3d7krHGN4sqRFvaqyrk9RhTzZp2xxm_YeVRgU_-ZZcv0GEeB_PBEtdRxRoG3NaY1T1gmOcxhUQYCyDzCJjaA-Y5V9No6ZEENFAihIY_2ETSKc_m6N8UNqEBWAbPVKSYadyb8hn4xwEsfuEeAThRxQZ9aOW1EwEQ_aQoSxRi1bfTOWZEW5mg5taY9grhzp5RxOgBbRscGaybpbuy3UzTcfk9W73ScpDwmEa_nL8LJ123at68-9fhwdnrruafj98fdbadfnzV1XZy_Laz6e1JV9PHg_OTg9PO1uPO4c4P3n7savuVzTrvFP0G2O2QZqyr_Z8smfQ0__vN2_ddbWMedjXRAACI_UKz6lBcYsMOEe8ZlQWdLSZRdbF1dtXYwwBXG_p-eOIWV8pY6JlvJSSftvlXmk9iW-7rrZRo_mMhx_YbNP25663qDEEtstvbV2PY9XapNxNdLXOzLSkUb-mBCkvQrqs9EkGejWGX3GV62JuPoRNVzWl1-_CPfc5mg0Brmw5dYx0z15vb0NXtnTq72Bb9Uhshtuc7pXGX0MXNic727iWSctnZJEXGVaelJAM0nqguRQ127G7VyFd2tVeFltaxbaGpo9VUjlZW3v5e18pzD_q7mOZx1Lkgis8gukjNtZy2he1883AvrziXr08O392DtmP167s6LOSt5wm5jMaZyicbh5OVkrGtWpoJumoX4YTrZNqVanvC_f3Cbl80eEg_u5cxmqXv-nfJsP36MO05Qytm3zWpKbQ2bKphbkOTaSSocjUxmwgtVnVXexM3uGr5OrrQzdGrIZSumD7Ad9g6Z9xuraIS4rp926IbFY26NzXtec_NzEgK8hezV6m4odOu6LgZpZ6JZizolKXN5VfHbfYyp8s9FXinqo6PPwX1A5gXIzulWNhHLX4qRji2xxQTlb2oENjKRVdsxrMFbNOw2r4DWBPryj3g4pILRozqko3LApOqxkCQ0ufwy1dUzpiyqxZ72JSgU4Mf5Lx8X6YD9wO5gqdN1FXStm02Dl2YgNSAIle2UxmQnE_48H1j_1ikz1JN9xyhtOeJiFiAlbuDQPEbrsr-GuABzPNP3viVuiUItS32uRgDt3aJ-R-qmPbyje2BR81Vq36Clr_qG8-67lhNCL7PRC4D5wKU9j_ss3KaUSp0yBF98oBGkFER-q8odHjapRC09CoE7T0KQetDKGQPVEqFjlgU4QQdFeFuRaGjoy6FoKVXIWjvUQhaH0Kh6kznwlGreGu7uxeE13yF6CyU9m7F4tlA6ACxuA5hXYIVl4x7PrZsE6jssrUwxTJfPbwqRTyvXZHvCIX1e_TN4U33u2qs5sFWZY_qon_HSGm9RwV1Oz7rXSuLeyTWGvnjGTfGTjA-hhNIE2qOJD7WQkoPPMfyUkfH8mhZT_Is7OiGdZBVzVs62gsURec_prxrZF3IsN2m0dLWPNp6vomWeg9bBP5OKc8qKVMR93A8FbHLMeSB6hNAt7sEiuq9YltfXRZqpN6WbkU2bl0Pjg9YtztTEjwyl8z5qrsxuWYmHcSxcozePEUv7hiMyppgzEA8Y13EJHr3qc9KDrEKXH01p4U-K-qO2N8b6A1_7ai1PEUyeW5QP-DUp313Lfe-JsUP3DIPzGdAu3cD91KUi1F0sYXRUO-gN7godlfIb28WmP-ZWxWJwH9hunhQLjYdikSumiQz0ey-iiIMzFxJ0_e3fLaV0WG4b97oq0inaXQLJb6W0Y-Ovn2jr6KxptFrcOermL4NBH1rM9HUzSUsL_1c1W6QfRWbl_Cwdpg30MdQ39oc1HRttz9SrgLXrzIj7bj34ezvFBgeagZKxLjxFDhg-XONyr2rpgNSC6T_qtPgbAq-0TlorgKrcGl-dxfzlWJSE21_axEI933t_fEW-n8AkikTFP5YAAA="}